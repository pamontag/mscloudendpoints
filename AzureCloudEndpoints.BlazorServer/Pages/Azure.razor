@page "/Azure"


@using AzureCloudEndpoints.BlazorServer.Data
@using AzureCloudEndpoints.BlazorServer.Model
@inject EndpointService EndpointService

<h1>Azure IP Ranges</h1>

<p>IP address ranges for Public Azure as a whole, each Azure region within Public, and ranges for several Azure Services (Service Tags) such as Storage, SQL and AzureTrafficManager in Public. </p>

@if (endpoints == null && services == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MatSelect Label="Select a service" ValueChanged="(string i) => OnChangeService(i)" Value="@selectedService">
        @foreach (var service in services)
        {
            <MatOptionString Value="@service">@service</MatOptionString>
        }
    </MatSelect>
    <MatSelect Label="Select a region" ValueChanged="(string i) => OnChangeRegion(i)" Value="@selectedRegion">
        @foreach (var region in regions)
        {
            <MatOptionString Value="@region">@region</MatOptionString>
        }
    </MatSelect>
    <table class="table">
        <thead>
            <tr>
                <th>Service</th>
                <th>Name</th>
                <th>Region</th>
                <th>Platform</th>
                <th>Address Prefixes</th>
                <th>Network Features</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var endPoint in selectedEndpoints)
            {
                <tr>
                    <td>@endPoint.properties.systemService</td>
                    <td>@endPoint.name</td>
                    <td>@endPoint.properties.region</td>
                    <td>@endPoint.properties.platform</td>
                    <td>
                        @if (endPoint.properties.addressPrefixes != null)
                        {
                            <MatAccordion>
                                <MatExpansionPanel>
                                    <MatExpansionPanelSummary>
                                        <MatExpansionPanelHeader>Ips</MatExpansionPanelHeader>
                                    </MatExpansionPanelSummary>
                                    <MatExpansionPanelDetails>
                                        <ul>
                                            @foreach (var ip in @endPoint.properties.addressPrefixes)
                                            {
                                                <li>@ip</li>
                                            }
                                        </ul>
                                    </MatExpansionPanelDetails>
                                </MatExpansionPanel>
                            </MatAccordion>
                        }
                    </td>
                    <td>
                        @if (endPoint.properties.networkFeatures != null)
                        {
                            <MatAccordion>
                                <MatExpansionPanel>
                                    <MatExpansionPanelSummary>
                                        <MatExpansionPanelHeader>Network Features</MatExpansionPanelHeader>
                                    </MatExpansionPanelSummary>
                                    <MatExpansionPanelDetails>
                                        <ul>
                                            @foreach (var network in @endPoint.properties.networkFeatures)
                                            {
                                                <li>@network</li>
                                            }
                                        </ul>
                                    </MatExpansionPanelDetails>
                                </MatExpansionPanel>
                            </MatAccordion>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private AzureEndpoint[] endpoints;
    private AzureEndpoint[] selectedEndpoints;
    private string[] services;
    private string selectedService;
    private string[] regions;
    private string selectedRegion;

    protected override async Task OnInitializedAsync()
    {
        endpoints = (await EndpointService.GetAzureEndpointsAsync()).values.ToArray();
        endpoints.Where(e => e.properties.region == "").ToList().ForEach(e => e.properties.region = "global");
        endpoints.Where(e => e.properties.systemService == "").ToList().ForEach(e => e.properties.systemService = "AzureCloud");
        services = endpoints.Select(e => e.properties.systemService).Distinct().OrderBy(e => e).ToArray();
        selectedService = services.Single(r => r == "AzureCloud");
        regions = endpoints.Select(e => e.properties.region).Distinct().OrderBy(e => e).ToArray();
        selectedRegion = regions.Single(r => r == "westeurope");
        selectedEndpoints = endpoints.Where(e => e.properties.systemService == selectedService && e.properties.region == selectedRegion).ToArray();
    }

    public void OnChangeService(string service)
    {
        selectedService = service;
        selectedEndpoints = endpoints.Where(e => e.properties.systemService == selectedService && e.properties.region == selectedRegion).ToArray();
        if(selectedEndpoints.Count() == 0)
        {
            OnChangeRegion("global");
        }
    }

    public void OnChangeRegion(string region)
    {
        selectedRegion = region;
        selectedEndpoints = endpoints.Where(e => e.properties.systemService == selectedService && e.properties.region == selectedRegion).ToArray();
    }
}
